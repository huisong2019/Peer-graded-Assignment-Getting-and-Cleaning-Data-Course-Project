Run_analysis.R scripts for final project 

library(dplyr)

#Step1: Getting all data 

filename <- "GCD_PROJECT.zip"
if (!file.exists(filename)){
  fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
  download.file(fileURL, filename, method="curl")
}  

if (!file.exists("UCI HAR Dataset")) { 
  unzip(filename) 
}

#Assigning all data frames

features <- read.table("UCI HAR Dataset/features.txt", col.names = c("n","measures"))
activities_lables <- read.table("UCI HAR Dataset/activity_labels.txt", col.names = c("code", "activity"))

#Reading test dataset 
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt", col.names = "subject")
x_test <- read.table("UCI HAR Dataset/test/X_test.txt", col.names = features$measures)
y_test <- read.table("UCI HAR Dataset/test/y_test.txt", col.names = "code")

#Reading train dataset 
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt", col.names = "subject")
x_train <- read.table("UCI HAR Dataset/train/X_train.txt", col.names = features$measures)
y_train <- read.table("UCI HAR Dataset/train/y_train.txt", col.names = "code")


#Combing each test and training table, respectively.

a <-cbind(y_test, subject_test, x_test)

b <-cbind(y_train, subject_train, x_train)

#Merging the train and the test tables

combined_Data <- rbind(a, b)


#Step 2: Extracts only the measurements on the mean and standard deviation for each measurement.

tidyData <- combined_Data %>% select(subject, code, contains (c("mean", "std")))


#Step 3: Uses descriptive activity names to name the activities in the data set.

tidyData$code <- activities_lables[tidyData$code, 2]


#Step 4: Appropriately labels the data set with descriptive variable names.

names(tidyData)[2] = "activity"
names(tidyData)<-gsub("Acc", "Accelerometer", names(tidyData), ignore.case = TRUE)
names(tidyData)<-gsub("Gyro", "Gyroscope", names(tidyData), ignore.case = TRUE)
names(tidyData)<-gsub("BodyBody", "Body", names(tidyData), ignore.case = TRUE)
names(tidyData)<-gsub("Mag", "Magnitude", names(tidyData), ignore.case = TRUE)
names(tidyData)<-gsub("^t", "Time", names(tidyData), ignore.case = TRUE)
names(tidyData)<-gsub("^f", "Frequency", names(tidyData), ignore.case = TRUE)
names(tidyData)<-gsub("tBody", "TimeBody", names(tidyData), ignore.case = TRUE)
names(tidyData)<-gsub("-mean()", "Mean", names(tidyData), ignore.case = TRUE)
names(tidyData)<-gsub("std", "STD", names(tidyData), ignore.case = TRUE)
names(tidyData)<-gsub("-std()", "STD", names(tidyData), ignore.case = TRUE)
names(tidyData)<-gsub("-freq()", "Frequency", names(tidyData), ignore.case = TRUE)
names(tidyData)<-gsub("angle", "Angle", names(tidyData), ignore.case = TRUE)
names(tidyData)<-gsub("gravity", "Gravity", names(tidyData), ignore.case = TRUE)


head(tidyData)


#Step 5: From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.

calculatedTidyData <- tidyData %>%
  group_by(subject, activity) %>%
  summarise_all(funs(mean))


write.table(calculatedTidyData, "calculatedTidyData.txt", row.name=FALSE)
